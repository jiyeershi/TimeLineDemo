
unity资源：

模型及动画的导出与使用：

模型主要用于场景搭建，角色

建模工具(maya,3dmax等)导出模型的格式：
1.导出格式：
 i.插件格式：fbx, obj
 ii.建模工具的原生文件，如maya,3dmax 等，注意有些建模软件的原生文件 unity可能不支持

2.导出选项:
导出模型时 可以 勾选 是否连带模型上的动画一起导出
此时又有两种方式：
 i. 单个模型文件，里面带有所有的动画片段（例如：idle, run...）,在该文件导入Unity后 通过帧的范围来分割动画片段
 ii.导出一个不带动画的基本模型文件hero_animate, 然后再导出一个只包含idle动画的模型文件 导出名字为hero_animate@idle，注意此种方式所有动画片段导出名字都要按照这种规范，Untiy才能使用

3.推荐方式：插件导出格式

动画烘焙：建模工具里做的动画与unity里的实现方式可能不完全一样，例如骨骼IK计算，所以在建模工具导出动画前，对动画进行烘焙 成帧动画

unity 里动画分割：
如上面介绍的当所有动画文件包含在一个 模型文件中时， 可以在unity里进行分割出多个动画；
Unity里选择模型->Inspector里选择Animation->clips面板里新增动画片段->选择起始和终止帧


材质及着色器：用于物体的外表，给物体穿上外衣
材质:相当于一个框架，在这个框架中可以选择不同的着色器模型，来定义材质的外表
着色器：相当于材质框架里的内容，有多种着色器供选择，每种着色器里可以有多重属性定义来调节整个材质的外表，像颜色，着色器用的纹理
着色器中的纹理：定义物体的外表

纹理："当前"就理解为图片或psd等文件 经过一些Unity选项配置，生成的各种渲染文件，像基本的2d Texture, 2d Normal Map(法线贴图)等，可以供各种着色器使用

纹理的使用方式：
1.上面所说的在着色器中使用
2.通过GUI的方式，在代码里先加载 Resource.load 后，用GUI.DrawTexture 进行绘制


//换装
Mesh(网格),骨骼, 蒙皮
Mesh: 就是3d模型的所有顶点，引擎则利用这些顶点信息 就可以将模型的轮廓绘制出来，相当于一个毛坯房的感觉，如果这个物体是静态模型的话，这样就足够了。
问题：但如果是动态模型，即需要给模型增加动作，这又将如何：
这个模型运动，问题实质上是一个Mesh上的顶点动态变化的过程，我们可以手动去移动每个顶点来做出对应的动作，但这无疑工程量太大了
所以骨骼就是为了解决这个问题的。

Bones, Bip:骨骼
Bones的一般用于场景物件和非脊椎动物的动作,比如披风,旗帜,鸟类,而Bip大多用于脊椎动物,或类人生物的主体部分。对于稍微复杂一点的模型,通常是两者结合。骨骼用来做出相应的动作。

蒙皮：
虽然骨骼可以用来摆出各种动作的样子，但是若没有蒙皮 骨骼不会对Mesh上的顶点产生影响。
蒙皮的核心是将Mesh顶点绑定到对应的骨骼上，让Mesh上每个顶点都记录自己受哪几根骨头的影响，相对的位置以及影响的权重。这样当骨骼移动时，各个顶点能根据骨骼当前位置以及权重等
计算出新的位置，这样骨骼就能带动 Mesh上的相应的顶点一起运动了。

这里看起来 骨骼类似于人的骨头，Mesh是肉， 蒙皮让其骨肉相连

串起来说一下,角色美术建立好T-pos下的模型后,交给动作美术,动作美术基于模型的姿势,大小,形态来选择Bip或者bone骨骼来搭配出相应的骨骼结构。然后进行绑骨,把Mesh上的顶点和对应的骨骼关联起来。
这样在后面制作动作关键帧的时候,骨骼的变化会带动与其绑定顶点的变化。

说一下几个关键的Unity组件: Animator,SkinnedMeshRenderer
    Animator会读取动画信息,我们在前置篇提到,max只制作动画的关键帧,而游戏渲染是一帧一帧的,关键帧之间的动画如何过渡,就是引擎自己负责的,也就是Animator做的事,Animator计算好当前帧的骨骼姿态后。会根据结果去改变Animator组件所在节点下的骨骼结构节点,只有我们在max里将骨骼正确导出,才会出现这些节点。
	SkinnedMeshRenderer则负责蒙皮计算,在每一帧中根据Animator计算出来后的骨骼位置,找到自己关联了哪些骨骼及权重,然后进行变换和插值,计算出mesh顶点的正确位置。再将这些顶点信息传入对应的材质球中进行渲染。

https://www.cnblogs.com/Esfog/p/EquipChange_SimpleArchive.html

服装，道具 模型








编辑器资源管理：
1.Unity编辑器里 project视窗下的
Assets的目录结构 是磁盘上目录结构的镜像，但unity编辑器里看到的Assets里的文件却是通过Unity编辑器将磁盘上文件转换后的文件，相当于在原始文件上加入了一些中间数据
便于此原始文件 更方便的被Unity使用，那么其新加的数据都是放在磁盘下与Assets平级的 Library 目录里

2.基于上面的原因，在Unity编辑器进行文件的移动操作可能是更好的选择，因为及时被编辑器处理


cinemachine:
1.可以创建虚拟相机，这个虚拟相机的作用是用来控制场景中的实际相机。实际应用中一般创建多个虚拟相机，以多种不同的方式、角度观察场景或特写某个物体，譬如可以用一个 VM 正面观察物体，再用一个 VM 侧面观察, 等等 类似于拍电影一样
然后，通过动态切换 相机，来分别以不同的角度渲染展示观察到的东西，实现电影一样的效果。

譬如目前进行的实验：TimeLine + VM
场景中只有主摄像机，角色 Lu(来自adam素材里)
1.创建一个虚拟相机1，通过调整虚拟相机的位置以及旋转，来改变该主相机的观测角度，同时该虚拟相机提供了很多设置模式，像跟随（Follow）场景中
的某个物体，观察（look at）物体上的某个部件等等。此时我们调整 虚拟相机1为 正面观察 场景中的 Lu 角色，并设置Follow. Follow 的效果是保持相机和角色Lu的相对距离始终不变
当角色直线移动，相机同样方向的移动。(follow 操作可以设置虚拟相机body属性面板的属性来进行微调)
2.创建虚拟相机2，以侧面观察 Lu角色，并设置Look at 角色的某个部位。Look at 的效果是相机位置不动，但是当角色移动时，相机会跟着旋转 保证一直 Look at 那个设置的部位 (look at 操作可以设置虚拟相机 aim 属性面板的属性来进行微调)
3.创建空物体命名obj,重置该物体Transform, 在TimeLine窗口点击Create 给该物体obj 创建TimeLine, 并在Timeline窗口删除默认的轨道
4.TimeLine窗口上右键添加Animation Track, 拖动角色Lu到该Track上，会提示 让你选择 Lu的那个动画，选择Walk ，这时候角色Lu 将回到他的初始位置（0，0，0），即直接将其预制体Lu
拖到场景中的位置，(此时有个问题，在前面调整虚拟相机时，前面的1，2 step 中改变了角色Lu 的 Transform, 此时又会被添加 Animation Track 的walk 动画 强制调整回初始位置（即直接将其预制体
拖到场景中的位置），不知道啥意思？为了避免偏移，我是在 step1, 2 中不改变角色 Lu的Transform, 而是改变相机的transform)
5.拖动主相机到 TimeLine上，增加cinemation Track, 此时设置 该cinemation Track的相机为虚拟相机1， 再添加cinemation Track ，设置该cinemation Track 的虚拟相机为虚拟相机2
6.拖动时间轴 ，即可以看到非常神奇的电影效果，随着角色走动，我们先正面看到vm1 的观察效果，然后时间线推移 走到vm2的观察效果，即先正面观察，然后侧面观察
very cool

2.其强大之处是可以结合 TimeLine (时间线) 来创建 Cinemachine shot, 每个Cinemachine shot 用来绑定 一个VM ,将多个 Cinemachine shot 放置在时间线上即可 按时间推移依次展示每个 VM里看到的场景，实现特写,另外通过 可视化的 控制
Cinemachine shot，可以调整 该 VM 片段展示的时长。另外TimeLine可以直接对两段动画进行融合，实现多个动画片段更好的过渡。

3.虚拟相机的观察效果的两大类: 
	跟随（Follow）场景中的某个物体: Follow 的效果是保持相机和角色Lu的相对距离始终不变, 相机不发生旋转 Transform属性里Rotation不会变。 效果的微调参数在: Body 面板栏
	a.当角色直线移动，相机同样方向的移动。
	b.当物体沿着某条不规则轨迹时，譬如过山车一样的轨道时，跟随的follow相机 按照某条计算出的轨迹进行跟踪， 但始终与物体的距离不变，而follow 相机的 Transform的 x,y,z 都会变化
	无论是以上的哪种情况，Transform属性里Rotation都不会变。 即，相机的朝向 没变？ 从场景中Y轴 往下观看，相机的朝向确实没变，只是相机的空间位置变了

	问题: 相机的x,y,z 如何计算的？ 具体就是 物体在过山车轨迹上运动时，其追踪轨迹的计算方式暂未确定？按理说 ，由物体在空间中的某一位置，及到该位置的距离 可以求得一个球面，
相机的位置肯定在球面的某个位置上。但具体哪个位置如何求得？可能是保持两个物体在 空间中 某个轴的（譬如Y轴）位置一样，计算其他两轴的位置？ 

	观察（look at）物体上的某个部件等等:  一直盯着某个部件观察。其角度会旋转。效果的微调参数在: Aim 面板栏

4.dolly Camera and Track: 
	功能： 实现 VM 在一条特定的 摄像机轨道上 去 Follow 某个物体，摄像机会根据 Follow 的物体的位置，来在轨道上移动。这样可以实现按指定的轨道 去 Follow 目标。
注意：经过试验，物体移动时，相机在轨道上始终移动到离被追踪物体 比较近的一个位置，根据肉眼观察，该位置可能是该轨道上距离跟踪物体最近的位置。
	如何创建：选择创建dolly Camera 可以创建一个虚拟相机VM 和一个 Dolly Track物体, 这个Dolly Track 就是可以设置的 一组点组成的 摄像机轨道（编辑该轨道）, 选择该VM, 在检视面板里可以看到Body 栏里模式 选择成了
Tracked Dolly, 其表示VM 按照dolly 轨道来移动， 其下面一行是path, 表示相机的移动的 dolly 轨道，我们可以选择上面的 Dolly Track, 这样设置后 在勾选该面板最后的 Auto dolly -> enable
选项，表示 VM 按我们 制作的Dolly Track 轨道 进行移动。
	当然这里还有一点要注意，当我们按照上面的步骤设置好后，相机并没有追踪的物体，我们需要在Follow 选项里 指定一个目标


4.State driven Camera: 状态驱动相机  特写物体的某个动作状态比较有用
	功能：根据目标的 animator组件的 状态来 切换对应的 虚拟相机，达到不同状态下用 不一样的相机进行 特写的目的，通过物体的动画状态 来驱动 相机切换
	如何创建：选择 Create State-Driven Camera, 场景中出现对应的 名字为 CM StateDrivenCamera 的物体，选择该物体 可以看到Inspector 面板里 Animated Target 一栏需要指定 驱动 状态驱动相机的 物体,
在 Virtual Camera Children 属性里规定了该状态驱动相机所用到的虚拟相机，在该栏上面指定了 Animated Target 目标的 每个状态对应用哪个虚拟相机 观察，该栏的wait参数 表示进入该状态 等待多久 启动该相机观察，
在该栏上方可以看到，相机切换时， 我们可以指定 Blend, 实现更加平滑的相机 切换，这里可以创建自定义的 Blend.


5.Free Look Camera: 赛车类游戏，追踪赛车比较有用
	功能：根据鼠标的左右上下移动，围绕 目标物体 旋转 进行观查
	如何创建: 选择Create Free Look Camera, 在场景中创建 CM FreeLook的物体，选中该物体 可以看到 Inspector 面板,  Follow 属性选择 跟随目标， Look at 属性选择 要 的目标部位，如角色的头部。
Axis Control 里的 Y Axis/ X Axis 的参数 分别控制 鼠标在横向和纵向 移动时，摄像机横向和纵向移动 的最大速度 MaxSpeed，加速/减速时间 Accel Time/ Decel Time
Orbits: 定义了三个圆形截面TopRig, MiddleRig, Bottom Rig，可以定义该截面的距地面的高度 Height, 以及截面的半径 Radius, 表示摄像机绕观察物体的上下 所能移动到最大 /最小高度，以及旋转时最大/最下半径， 即摄像机始终在这三个圆形截面内旋转观测.
Common Lens: 可以看到控制摄像的视野，裁剪面等等，这里如果禁用掉，则可以自定义每个 Orbit 截面的 摄像机视野，裁剪面等摄像机基本设置
    高级点的：就是程序或动画控制 Y Axis/ X Axis 输入，来动态决定相机的移动，这时候需要把 Y Axis/ X Axis的 Input Axis Name 参数置空，将其Value 交由程序控制，或动画控制

6.Clear Shot: 简洁，清晰的切换 摄像机片段





TimeLine:
综述：主要将场景中的需要按时间顺序组织的 角色动画，音频播放，摄像机显示等按轨道组织起来，由时间顺序驱动这些资源进行场景的表现。可以很方便，可视化的调整各个资源的出场顺序以及节奏 来很好的制作出一种类似电影的场景
它可以做单独的 cutScene，或者由游戏过程中触发的 cutScene, 或者 在游戏中触发了 cutScene 播放的同时，继续操作场景中的角色进行游戏
Track: 每一个gameObject 由一个Track 控制，track 分 Audio Track, Active Track(激活显示物体)，Animation Track, Clip Track(动画片段Track)
Track Group: 当TimeLine里的Track 数量太多的时候，可以将同一类型的Track， 打成一组 ，相当于文件夹



(414.0, -586.3, 0.0)




Transform 之 Rotate：
目前理解还不完善，甚至不对，需要以后更进一步校验。

1.在编辑器属性面板里， position, scale, rotate 的含义:
unity 文档所述：The position, rotation and scale values of a Transform are measured relative to the Transform’s parent. If the Transform has no parent, the properties are measured in world space.
看文档说这三个属性 的值都是 相对于 parent的，也就是说在父节点的变化上 再做自身这个变化。
这里我想这样理解下这个rotate 应该跟 scale属性 类似，都是对自身做的变化，scale 对自己缩放，rotate 应该绕自己的轴旋转

编辑器里 Transform 的 Rotation 属性: Rotation of the Transform around the X, Y, and Z axes, measured in degrees.
意思说 分别是绕 X, Y, Z 轴的旋转度数。
但是 实验中 ，改变 rotate属性的值x,y,z, 按理说改变 Rotate 属性的X 值， 应该可以看到物体绕 自身X 轴转动， 转动Y轴 应该绕自身Y轴转动，Z轴同理 在实验中会出现很古怪的现象，改变各个分量的值，观察物体状态，发现有时候可以绕变化值的 
那根轴旋转，有时候却不能，实验次数越多越没规律。
这个地方就产生了很大的疑问。？？？

这里暂时理解为：物体在空间中的角度，这个角度就是用欧拉角度表示的。

欧拉角: 物体在 yew, roll, pitch 的旋转量，用这三种旋转 做出的旋转 总能得到想要的角度

万向节锁：在应用中，需要按照一定顺序去旋转物体 来得到最终的方位（这样更加可控制）， 所以我们采用按 一定的旋 转顺序去旋转物体试图得到最终的角度，但此时 有可能出现一个问题，当一个旋转分量和另一个旋转分量 旋转到同一平面时，会丢失一个旋转维度，导致无法通过这个规定的旋转顺序来得到最终想要的方位，称为万向节锁。具体参考解释视频。

四元数：用四元数可以解决用欧拉旋转 导致的万向节锁问题。这个应该是方位在场景世界中的绝对值，也就是绝对表示，若两个物体如果最终相对于世界的角度完全一样，这个四元素就是唯一表示该方位的值。

一些方位函数：
1.LookRotation(vector3 forward, vector3 upward)
forward:世界坐标系中的某个方向向量
upward:世界坐标系中的某个方向向量
函数的效果：是计算出 要将物体正面朝向 世界坐标系下的 forward 方位， 上面朝向 upward 时的方位 时的四元素。将这个四元素 赋给某物体的 Transform.Rotation ,则可以直接将物体旋转到该方位。
需要注意的是，最终物体必然是 朝向世界中 forward方向，但此时 物体上方 可能 不能完全朝向 upward, 但是也是最趋向于这个方向的方向，可以看看这个函数的详细计算过程。可以拿笔和本子更好的观察。
https://blog.csdn.net/lijing_hi/article/details/7272089

2.旋转函数
transform.Rotate(xAngle, yAngle, zAngle, Space.World);
transform.Rotate(xAngle, yAngle, zAngle, Space.Self);
参数：本次旋转的变化量
这两个函数表现很清晰，绕着自身 或世界的 的 x, y, z旋转多少度，场景中观测 符合预期
注意：该函数每次调用都会改变物体的角度，相当于每次调用 都旋转 参数所示的度数



